{
  "name": "clinical_data_report_workflow.json",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "daysInterval": 7,
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -16,
        -128
      ],
      "id": "e3214b55-5f69-45ab-94fc-eeec9f10bb5a",
      "name": "Weekly Report Schedule"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1BZQ67hYAelwpBsQYVbqX0-ynb7F_gzJe7WnYvWDI1Jg",
          "mode": "list",
          "cachedResultName": "Dummy Clinical Data Source",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BZQ67hYAelwpBsQYVbqX0-ynb7F_gzJe7WnYvWDI1Jg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BZQ67hYAelwpBsQYVbqX0-ynb7F_gzJe7WnYvWDI1Jg/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        208,
        -128
      ],
      "id": "9e1c6a7a-30b8-4f37-bfac-a31016b7cd5c",
      "name": "Read Raw Clinical Data",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "FihlFYdP1Wci4LnW",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const aggregatedReports = [];\nconst patientMap = new Map(); // To aggregate data by patientId\n\n// Loop through each row (item) received from the previous node (Google Sheets)\nfor (const item of $input.all().map(i => i.json)) {\n    // Ensure core fields exist before processing a row\n    if (!item.patientId || !item.visitDate || !item.DOB) {\n        console.warn(`Skipping row due to missing patientId, visitDate, or DOB: ${JSON.stringify(item)}`);\n        continue; // Skip to the next item if critical data is missing\n    }\n\n    const patientId = item.patientId;\n    let patientData = patientMap.get(patientId);\n\n    // Initialize patient data if this is the first time we see this patient ID\n    if (!patientData) {\n        patientData = {\n            patientId: patientId,\n            lastName: item.lastName,\n            firstName: item.firstName,\n            gender: item.gender,\n            dob: item.DOB,\n            age: null, // Will calculate below\n            totalVisits: 0,\n            totalBillAmount: 0,\n            diagnoses: new Set(), // Use Set to store unique diagnoses\n            medications: new Set(), // Use Set to store unique medications\n            lastVisitDate: null,\n            avgHemoglobin: 0,\n            hemoglobinCount: 0\n        };\n        patientMap.set(patientId, patientData);\n    }\n\n    // Calculate Age (simple calculation based on birth year and current date)\n    if (item.DOB && patientData.age === null) { // Only calculate age once per patient\n        const birthDate = new Date(item.DOB);\n        const today = new Date();\n        let age = today.getFullYear() - birthDate.getFullYear();\n        const m = today.getMonth() - birthDate.getMonth();\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n            age--;\n        }\n        patientData.age = age;\n    }\n\n    // Aggregate data for each visit/row\n    patientData.totalVisits++;\n    if (item.billAmount) {\n        patientData.totalBillAmount += parseFloat(item.billAmount);\n    }\n    if (item.diagnosis) {\n        patientData.diagnoses.add(item.diagnosis.trim()); // Add unique diagnosis\n    }\n    if (item.medication) {\n        patientData.medications.add(item.medication.trim()); // Add unique medication\n    }\n    if (item.visitDate) {\n        const currentVisit = new Date(item.visitDate);\n        // Update last visit date if this visit is newer\n        if (!patientData.lastVisitDate || currentVisit > new Date(patientData.lastVisitDate)) {\n            patientData.lastVisitDate = item.visitDate;\n        }\n    }\n    if (item.labResult_Hemoglobin && item.labResult_Hemoglobin !== 'N/A') {\n        patientData.avgHemoglobin += parseFloat(item.labResult_Hemoglobin);\n        patientData.hemoglobinCount++;\n    }\n}\n\n// Finalize aggregated data after processing all rows\nfor (const [id, data] of patientMap.entries()) {\n    // Calculate average hemoglobin\n    if (data.hemoglobinCount > 0) {\n        data.avgHemoglobin = (data.avgHemoglobin / data.hemoglobinCount).toFixed(2);\n    } else {\n        data.avgHemoglobin = 'N/A'; // If no hemoglobin data\n    }\n    // Convert Sets to comma-separated strings for reporting\n    data.diagnoses = Array.from(data.diagnoses).join(', ');\n    data.medications = Array.from(data.medications).join(', ');\n\n    // Push the finalized patient report data as a JSON item\n    aggregatedReports.push({ json: data });\n}\n\nreturn aggregatedReports; // Return the array of processed items for the next node"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        -128
      ],
      "id": "afe7edd3-6417-4ffb-9c08-c2732cdade6b",
      "name": "Transform & Aggregate Data",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1BZQ67hYAelwpBsQYVbqX0-ynb7F_gzJe7WnYvWDI1Jg",
          "mode": "list",
          "cachedResultName": "Dummy Clinical Data Source",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BZQ67hYAelwpBsQYVbqX0-ynb7F_gzJe7WnYvWDI1Jg/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1BZQ67hYAelwpBsQYVbqX0-ynb7F_gzJe7WnYvWDI1Jg/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "patientId,lastName,firstName,DOB,gender,diagnosis,visitDate,labResult_Hemoglobin,medication,billAmount,insurance\r\nPAT001,Smith,Alice,1985-03-15,Female,Hypertension,2025-01-10,14.2,Lisinopril,150.00,BlueCross\r\nPAT002,Jones,Bob,1970-11-20,Male,Diabetes Type 2,2025-01-15,N/A,Metformin,220.50,Aetna\r\nPAT003,Williams,Charlie,2000-07-22,Male,Asthma,2025-02-01,13.5,Albuterol,100.00,Cigna\r\nPAT001,Smith,Alice,1985-03-15,Female,Hypertension,2025-03-05,14.0,Lisinopril,150.00,BlueCross\r\nPAT004,Davis,Diana,1992-04-01,Female,Allergy,2025-03-10,N/A,Loratadine,80.00,Humana\r\nPAT002,Jones,Bob,1970-11-20,Male,Diabetes Type 2,2025-04-20,N/A,Insulin,300.00,Aetna\r\nPAT005,Brown,Eve,1965-09-05,Female,Arthritis,2025-05-01,12.8,Ibuprofen,180.00,BlueCross"
          ],
          "schema": [
            {
              "id": "patientId,lastName,firstName,DOB,gender,diagnosis,visitDate,labResult_Hemoglobin,medication,billAmount,insurance\r\nPAT001,Smith,Alice,1985-03-15,Female,Hypertension,2025-01-10,14.2,Lisinopril,150.00,BlueCross\r\nPAT002,Jones,Bob,1970-11-20,Male,Diabetes Type 2,2025-01-15,N/A,Metformin,220.50,Aetna\r\nPAT003,Williams,Charlie,2000-07-22,Male,Asthma,2025-02-01,13.5,Albuterol,100.00,Cigna\r\nPAT001,Smith,Alice,1985-03-15,Female,Hypertension,2025-03-05,14.0,Lisinopril,150.00,BlueCross\r\nPAT004,Davis,Diana,1992-04-01,Female,Allergy,2025-03-10,N/A,Loratadine,80.00,Humana\r\nPAT002,Jones,Bob,1970-11-20,Male,Diabetes Type 2,2025-04-20,N/A,Insulin,300.00,Aetna\r\nPAT005,Brown,Eve,1965-09-05,Female,Arthritis,2025-05-01,12.8,Ibuprofen,180.00,BlueCross",
              "displayName": "patientId,lastName,firstName,DOB,gender,diagnosis,visitDate,labResult_Hemoglobin,medication,billAmount,insurance\r\nPAT001,Smith,Alice,1985-03-15,Female,Hypertension,2025-01-10,14.2,Lisinopril,150.00,BlueCross\r\nPAT002,Jones,Bob,1970-11-20,Male,Diabetes Type 2,2025-01-15,N/A,Metformin,220.50,Aetna\r\nPAT003,Williams,Charlie,2000-07-22,Male,Asthma,2025-02-01,13.5,Albuterol,100.00,Cigna\r\nPAT001,Smith,Alice,1985-03-15,Female,Hypertension,2025-03-05,14.0,Lisinopril,150.00,BlueCross\r\nPAT004,Davis,Diana,1992-04-01,Female,Allergy,2025-03-10,N/A,Loratadine,80.00,Humana\r\nPAT002,Jones,Bob,1970-11-20,Male,Diabetes Type 2,2025-04-20,N/A,Insulin,300.00,Aetna\r\nPAT005,Brown,Eve,1965-09-05,Female,Arthritis,2025-05-01,12.8,Ibuprofen,180.00,BlueCross",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        624,
        -128
      ],
      "id": "6b5cbf45-96d1-4b0d-bd2e-cda36b629dbd",
      "name": "Write Clinical Report",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "FihlFYdP1Wci4LnW",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Weekly Report Schedule": {
      "main": [
        [
          {
            "node": "Read Raw Clinical Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Raw Clinical Data": {
      "main": [
        [
          {
            "node": "Transform & Aggregate Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform & Aggregate Data": {
      "main": [
        [
          {
            "node": "Write Clinical Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "96c09e86-8fdc-4c00-a514-9deba6d325e2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "0cfa00f1a2f9887200f66e0721eace57abdb8d604da82bdc32a06e34b12ae2f8"
  },
  "id": "3Cc1fK3i6NchcLTw",
  "tags": []
}